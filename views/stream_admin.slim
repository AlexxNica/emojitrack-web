div.container
  section#status
    h2
      | stream admin

    div.tabbable
      ul.nav.nav-tabs
        li.active
          a href="#queue_status" data-toggle="tab" queue status

      div.tab-content
        div.tab-pane.active#queue_status
          div.row
            div.span6#eps_score
              h3
                | eps score streams&nbsp;
                small
                  strong.num N
                  | &nbsp;open stream(s)
              table.table.table-striped
                thead
                  tr
                    th request_path
                    th client
                    th tag
                    th age
                    th node
                tbody
            div.span6#detail
              h3
                | detail streams&nbsp;
                small
                  strong.num N
                  | &nbsp;open stream(s)
              table.table.table-striped
                thead
                  tr
                    th request_path
                    th client
                    th tag
                    th age
                    th node
                tbody

          button.btn.btn-small#refreshbtn
            li.icon-refresh
            | &nbsp;force refresh
        div.tab-pane#event_log
          h3
            | realtime event log&nbsp;
            small reminder: only shows what happens while this window session is active
          table.table
            thead
              tr
                th event
                th request_path
                th client
                th tag
                th timestamp
            tbody
        div.tab-pane#settings
          h3 settings
          small
            dl
              dt SSE_FORCE_REFRESH
              dd = if SSE_FORCE_REFRESH then "TRUE" else "FALSE" end
              dt SSE_SCORE_RETRY_MS
              dd = SSE_SCORE_RETRY_MS
              dt SSE_DETAIL_RETRY_MS
              dd = SSE_DETAIL_RETRY_MS
              dt SSE_SCORE_FORCECLOSE_SEC
              dd = SSE_SCORE_FORCECLOSE_SEC
              dt SSE_DETAIL_FORCECLOSE_SEC
              dd = SSE_DETAIL_FORCECLOSE_SEC



javascript:
  if (!String.fromCodePoint) {
    /*!
     * ES6 Unicode Shims 0.1
     * (c) 2012 Steven Levithan <http://slevithan.com/>
     * MIT License
     **/
    String.fromCodePoint = function fromCodePoint () {
      var chars = [], point, offset, units, i;
      for (i = 0; i < arguments.length; ++i) {
        point = arguments[i];
        offset = point - 0x10000;
        units = point > 0xFFFF ? [0xD800 + (offset >> 10), 0xDC00 + (offset & 0x3FF)] : [point];
        chars.push(String.fromCharCode.apply(null, units));
      }
      return chars.join("");
    }
  }

coffee:
  pickPlatformIcon = (agent) ->
    return "apple" if agent.match(/Macintosh/)
    return "mobile-phone" if agent.match(/iPhone/)
    return "tablet" if agent.match(/iPad/)
    return "linux" if agent.match(/Linux/)
    return "windows" if agent.match(/Windows/)
    return "android" if agent.match(/Android/)
    "globe"

  tagRender = (tag) ->
    return "-" if tag == null
    emoji_char = String.fromCodePoint parseInt(tag, 16)
    "<span class='label label-info'>#{emoji_char} #{tag}</span>"

  renderMultiData = (response) ->
    emptyAllTables()
    renderData(node) for node in response

  renderData = (response) ->
    renderDataTable(response.connections.stream_eps, 'eps_score', response.node)
    renderDataTable(response.connections.stream_detail, 'detail', response.node)

  emptyAllTables = () ->
    $('tbody').empty()

  prettyAge = (age) ->
    return "#{age}s" if age < 60
    return "#{parseInt(age/60)}m" if age < 60*120
    "#{parseInt(age/(60*60))}h"

  renderDataTable = (response, id, node) ->
    id_selector = $("##{id}")
    tbody_selector = id_selector.find('tbody')
    for client in response
      tbody_selector.append("
        <tr>
          <td><code class='new'>#{client.request_path}</code></td>
          <td style='white-space: nowrap'><i class='icon-#{pickPlatformIcon(client.client_user_agent)}' title='#{client.client_user_agent}'></i> <tt>#{client.client_ip}</tt></td>
          <td>#{emoji.replace_unified tagRender(client.tag)}</td>
          <td><span class='badge'><i class='icon-time'></i> #{prettyAge(client.age)}</span></td>
          <td><span class='badge badge-success'>#{node}</span></td>
        </tr>
      ")
    id_selector.find('.num').text tbody_selector.find('tr').length

  newAdminConnect = (event) ->
    addEntryToEventLog $.parseJSON(event.data), 'CONNECT', 'label-success'

  newAdminDisconnect = (event) ->
    addEntryToEventLog $.parseJSON(event.data), 'DISCONNECT'

  @refreshData = ->
    $.get("/admin/streamers/status.json", (response) ->
      renderMultiData(response)
    , "json")

  $ ->
    $('#refreshbtn').click -> refreshData()
    setInterval refreshData, 10000
    refreshData()
